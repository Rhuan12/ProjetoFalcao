import streamlit as st
import PyPDF2
import pandas as pd
import re
import os
from io import BytesIO
import tempfile
import pytesseract
from pdf2image import convert_from_path
from PIL import Image

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Conversor de Ap√≥lices Tokio Marine",
    page_icon="üìÑ",
    layout="wide"
)

def extract_text_from_pdf(pdf_file):
    """
    Extrai texto de um arquivo PDF usando PyPDF2 e OCR como fallback
    """
    try:
        # Cria um arquivo tempor√°rio
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(pdf_file.read())
            tmp_file_path = tmp_file.name
        
        text = ""
        
        # Tentativa 1: Extrair texto diretamente com PyPDF2
        try:
            with open(tmp_file_path, "rb") as file:
                reader = PyPDF2.PdfReader(file)
                for page in reader.pages:
                    page_text = page.extract_text()
                    if page_text.strip():
                        text += page_text + "\n"
        except Exception as e:
            st.warning(f"PyPDF2 falhou: {e}")
        
        # Tentativa 2: Se n√£o conseguiu extrair texto, usar OCR
        if not text.strip():
            st.info("üì∏ PDF parece ser uma imagem. Usando OCR para extrair texto...")
            
            # Progresso para OCR
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                # Converte PDF para imagens
                status_text.text("Convertendo PDF para imagens...")
                images = convert_from_path(tmp_file_path, dpi=300)
                
                total_pages = len(images)
                status_text.text(f"Processando {total_pages} p√°gina(s) com OCR...")
                
                for i, img in enumerate(images):
                    # Atualiza progresso
                    progress = (i + 1) / total_pages
                    progress_bar.progress(progress)
                    status_text.text(f"Processando p√°gina {i+1} de {total_pages}...")
                    
                    # Aplica OCR na imagem
                    page_text = pytesseract.image_to_string(img, lang='por')
                    text += page_text + "\n"
                
                progress_bar.progress(1.0)
                status_text.text("‚úÖ OCR conclu√≠do!")
                
                # Limpa os elementos de progresso ap√≥s um tempo
                import time
                time.sleep(1)
                progress_bar.empty()
                status_text.empty()
                
            except Exception as ocr_error:
                st.error(f"Erro no OCR: {ocr_error}")
                st.error("Certifique-se de que o Tesseract est√° instalado corretamente.")
        
        # Remove o arquivo tempor√°rio
        os.unlink(tmp_file_path)
        
        return text
        
    except Exception as e:
        st.error(f"Erro geral ao processar PDF: {e}")
        return ""

def extract_field(patterns, text):
    """
    Procura por uma lista de padr√µes regex e retorna o valor encontrado
    """
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            value = match.group(1).strip()
            # Remove quebras de linha e espa√ßos extras
            value = re.sub(r'\s+', ' ', value)
            return value
    return "N√£o encontrado"

def parse_tokio_data(text):
    """
    Extrai dados espec√≠ficos da ap√≥lice Tokio Marine
    """
    # Dados do cabe√ßalho/cliente
    dados_header = {
        "NOME DO CLIENTE": extract_field([
            r"Propriet√°rio[:\s]*(.+?)(?:\n|$)",
            r"ROD TRANSPORTES LTDA"
        ], text),
        "CNPJ": extract_field([
            r"CNPJ[:\s]*(.+?)(?:\n|$)",
            r"(\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2})"
        ], text),
        "AP√ìLICE": extract_field([
            r"Nr Ap√≥lice[:\s]*(.+?)(?:\n|$)",
            r"Ap√≥lice Congenere[:\s]*(.+?)(?:\n|$)",
            r"(\d{8,})"
        ], text),
        "VIG√äNCIA": extract_field([
            r"Venc Ap√≥lice[:\s]*(.+?)(?:\n|$)",
            r"(\d{2}/\d{2}/\d{4})"
        ], text),
    }

    # Dados do ve√≠culo - adaptados para o formato do PDF enviado
    dados_veiculo = {
        "DESCRI√á√ÉO DO ITEM": extract_field([
            r"Descri√ß√£o do Item[:\s-]*(.+?)(?:\n|$)",
            r"Produto Auto Frota"
        ], text),
        "CEP DE PERNOITE DO VE√çCULO": extract_field([
            r"CEP de Pernoite do Ve√≠culo[:\s]*(.+?)(?:\n|$)",
            r"(\d{5}-\d{3})"
        ], text),
        "TIPO DE UTILIZA√á√ÉO": extract_field([
            r"Tipo de utiliza√ß√£o[:\s]*(.+?)(?:\n|$)",
            r"Particular/Comercial"
        ], text),
        "FABRICANTE": extract_field([
            r"Fabricante[:\s]*(.+?)(?:\n|$)",
            r"CHEVROLET"
        ], text),
        "VE√çCULO": extract_field([
            r"Ve√≠culo[:\s]*(.+?)(?:\n|$)",
            r"S10 PICK-UP LTZ.*"
        ], text),
        "ANO MODELO": extract_field([
            r"Ano Modelo[:\s]*(.+?)(?:\n|$)",
            r"(\d{4})"
        ], text),
        "CHASSI": extract_field([
            r"Chassi[:\s]*(.+?)(?:\n|$)",
            r"([A-Z0-9]{17})"
        ], text),
        "CHASSI REMARCADO": extract_field([
            r"Chassi Remarcado[:\s]*(.+?)(?:\n|$)"
        ], text),
        "PLACA": extract_field([
            r"Placa[:\s]*(.+?)(?:\n|$)",
            r"([A-Z]{3}\d{4}|[A-Z]{3}\d[A-Z]\d{2})"
        ], text),
        "COMBUST√çVEL": extract_field([
            r"Combust√≠vel[:\s]*(.+?)(?:\n|$)",
            r"Diesel"
        ], text),
        "LOTA√á√ÉO VE√çCULO": extract_field([
            r"Lota√ß√£o Ve√≠culo[:\s]*(.+?)(?:\n|$)",
            r"(\d+)"
        ], text),
        "VE√çCULO 0KM": extract_field([
            r"Ve√≠culo 0km[:\s]*(.+?)(?:\n|$)"
        ], text),
        "VE√çCULO BLINDADO": extract_field([
            r"Ve√≠culo Blindado[:\s]*(.+?)(?:\n|$)"
        ], text),
        "VE√çCULO COM KIT G√ÅS": extract_field([
            r"Ve√≠culo com Kit G√°s[:\s]*(.+?)(?:\n|$)"
        ], text),
        "TIPO DE CARROCERIA": extract_field([
            r"Tipo de Carroceria[:\s]*(.+?)(?:\n|$)"
        ], text),
        "4¬∫ EIXO ADAPTADO": extract_field([
            r"4¬∫ Eixo Adaptado[:\s]*(.+?)(?:\n|$)"
        ], text),
        "CABINE SUPLEMENTAR": extract_field([
            r"Cabine Suplementar[:\s]*(.+?)(?:\n|$)"
        ], text),
        "DISPOSITIVO EM COMODATO": extract_field([
            r"Dispositivo em Comodato[:\s]*(.+?)(?:\n|$)"
        ], text),
        "ISEN√á√ÉO FISCAL": extract_field([
            r"Isen√ß√£o Fiscal[:\s]*(.+?)(?:\n|$)"
        ], text),
        "PROPRIET√ÅRIO": extract_field([
            r"Propriet√°rio[:\s]*(.+?)(?:\n|$)",
            r"ROD TRANSPORTES LTDA"
        ], text),
        "FIPE": extract_field([
            r"Fipe[:\s]*(.+?)(?:\n|$)",
            r"(\d{6}-\d)"
        ], text),
        "TIPO DE SEGURO": extract_field([
            r"Tipo de Seguro[:\s]*(.+?)(?:\n|$)",
            r"Renova√ß√£o Tokio sem sinistro"
        ], text),
        "NR AP√ìLICE CONGENERE": extract_field([
            r"Nr Ap√≥lice Congenere[:\s]*(.+?)(?:\n|$)",
            r"(\d{8})"
        ], text),
        "NOME DA CONGENERE": extract_field([
            r"Nome da Congenere[:\s]*(.+?)(?:\n|$)",
            r"TOKIO MARINE"
        ], text),
        "VENC AP√ìLICE CONGENERE": extract_field([
            r"Venc Ap√≥lice Cong[:\s\.]*(.+?)(?:\n|$)",
            r"(\d{2}/\d{2}/\d{4})"
        ], text),
    }

    return dados_header, dados_veiculo

def create_excel_file(dados_header, dados_veiculo):
    """
    Cria arquivo Excel com os dados extra√≠dos
    """
    # Cria um buffer em mem√≥ria
    buffer = BytesIO()
    
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        # Aba com dados gerais
        df_header = pd.DataFrame([dados_header])
        df_header.to_excel(writer, sheet_name='Dados Gerais', index=False)
        
        # Aba com dados do ve√≠culo
        df_veiculo = pd.DataFrame([dados_veiculo])
        df_veiculo.to_excel(writer, sheet_name='Ve√≠culos', index=False)
    
    buffer.seek(0)
    return buffer

def main():
    st.title("üöó Conversor de Ap√≥lices Tokio Marine")
    st.markdown("---")
    
    st.markdown("""
    ### Como usar:
    1. üì§ Fa√ßa o upload da sua ap√≥lice em PDF (texto ou imagem)
    2. ‚ö° Aguarde o processamento autom√°tico (OCR se necess√°rio)
    3. üëÄ Visualize os dados extra√≠dos
    4. üíæ Baixe a planilha Excel gerada
    
    **‚ú® Suporte completo a PDFs digitalizados e escaneados!**
    """)
    
    # Upload do arquivo
    uploaded_file = st.file_uploader(
        "Escolha um arquivo PDF da ap√≥lice Tokio Marine",
        type=['pdf'],
        help="Fa√ßa upload do arquivo PDF da ap√≥lice para convers√£o (suporta PDFs com texto e imagens)"
    )
    
    if uploaded_file is not None:
        # Mostra informa√ß√µes do arquivo
        st.success(f"‚úÖ Arquivo carregado: {uploaded_file.name}")
        st.info(f"üìä Tamanho: {len(uploaded_file.getvalue())/1024:.1f} KB")
        
        # Bot√£o para processar
        if st.button("üîÑ Processar PDF", type="primary"):
            # Extrai texto do PDF (com OCR se necess√°rio)
            text = extract_text_from_pdf(uploaded_file)
            
            if text.strip():
                st.success("‚úÖ Texto extra√≠do com sucesso!")
                
                # Parse dos dados
                with st.spinner("Analisando dados da ap√≥lice..."):
                    dados_header, dados_veiculo = parse_tokio_data(text)
                
                # Mostra os dados extra√≠dos
                st.markdown("## üìã Dados Extra√≠dos")
                
                # Dados gerais em duas colunas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üè¢ Informa√ß√µes do Cliente")
                    for key, value in dados_header.items():
                        if value != "N√£o encontrado":
                            st.success(f"**{key}:** {value}")
                        else:
                            st.warning(f"**{key}:** {value}")
                
                with col2:
                    st.markdown("### üöô Informa√ß√µes do Ve√≠culo")
                    # Mostra apenas os campos encontrados
                    campos_importantes = [
                        "FABRICANTE", "VE√çCULO", "ANO MODELO", "PLACA", 
                        "CHASSI", "COMBUST√çVEL", "FIPE", "PROPRIET√ÅRIO"
                    ]
                    for campo in campos_importantes:
                        if campo in dados_veiculo:
                            value = dados_veiculo[campo]
                            if value != "N√£o encontrado":
                                st.success(f"**{campo}:** {value}")
                            else:
                                st.warning(f"**{campo}:** {value}")
                
                # Tabelas expandidas
                with st.expander("üìä Ver todos os dados em tabela"):
                    st.markdown("#### Dados Gerais")
                    st.dataframe(pd.DataFrame([dados_header]), use_container_width=True)
                    
                    st.markdown("#### Dados do Ve√≠culo")
                    st.dataframe(pd.DataFrame([dados_veiculo]), use_container_width=True)
                
                # Gera o arquivo Excel
                excel_buffer = create_excel_file(dados_header, dados_veiculo)
                
                # Bot√£o de download
                st.markdown("## üíæ Download")
                apolice_numero = dados_header.get('AP√ìLICE', 'sem_numero')
                if apolice_numero == "N√£o encontrado":
                    apolice_numero = "sem_numero"
                nome_arquivo = f"apolice_{apolice_numero}.xlsx"
                
                st.download_button(
                    label="üì• Baixar Planilha Excel",
                    data=excel_buffer,
                    file_name=nome_arquivo,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary"
                )
                
                st.success("‚úÖ Processamento conclu√≠do com sucesso!")
                
            else:
                st.error("‚ùå N√£o foi poss√≠vel extrair texto do PDF. Verifique se o arquivo n√£o est√° corrompido.")
        
        # Mostra preview do texto extra√≠do (opcional)
        with st.expander("üîç Ver texto extra√≠do do PDF (debug)"):
            if st.button("Extrair texto para visualiza√ß√£o"):
                with st.spinner("Extraindo texto..."):
                    text_preview = extract_text_from_pdf(uploaded_file)
                if text_preview:
                    st.text_area(
                        "Texto extra√≠do:", 
                        text_preview[:3000] + "..." if len(text_preview) > 3000 else text_preview, 
                        height=400
                    )
                else:
                    st.error("N√£o foi poss√≠vel extrair texto do PDF")

    # Informa√ß√µes adicionais
    with st.sidebar:
        st.markdown("## ‚ÑπÔ∏è Informa√ß√µes")
        st.markdown("""
        **Recursos:**
        - üìÑ PDFs com texto nativo
        - üì∏ PDFs escaneados (OCR)
        - üáßüá∑ Reconhecimento em portugu√™s
        - üìä Export para Excel
        - üîç Modo debug
        
        **Requisitos:**
        - Tesseract OCR instalado
        - PDF da Tokio Marine
        """)
        
        st.markdown("## üõ†Ô∏è Configura√ß√£o OCR")
        if st.button("Testar Tesseract"):
            try:
                version = pytesseract.get_tesseract_version()
                st.success(f"‚úÖ Tesseract v{version}")
            except:
                st.error("‚ùå Tesseract n√£o encontrado")
                st.markdown("""
                **Para instalar:**
                - Windows: [Download](https://github.com/UB-Mannheim/tesseract/wiki)
                - Linux: `sudo apt install tesseract-ocr tesseract-ocr-por`
                - Mac: `brew install tesseract tesseract-lang`
                """)

if __name__ == "__main__":
    main()