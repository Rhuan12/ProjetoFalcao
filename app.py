import streamlit as st
import PyPDF2
import pandas as pd
import re
import os
from io import BytesIO
import tempfile
import numpy as np

# Importa√ß√µes condicionais para OCR
OCR_AVAILABLE = False
TESSERACT_AVAILABLE = False

try:
    import pytesseract
    from pdf2image import convert_from_path
    from PIL import Image
    TESSERACT_AVAILABLE = True
    OCR_AVAILABLE = True
except ImportError:
    try:
        import easyocr
        from pdf2image import convert_from_path
        from PIL import Image
        import numpy as np
        OCR_AVAILABLE = True
    except ImportError:
        pass

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Conversor de Ap√≥lices Tokio Marine",
    page_icon="üìÑ",
    layout="wide"
)

@st.cache_resource
def load_easyocr():
    """Carrega o modelo EasyOCR apenas se necess√°rio"""
    if not TESSERACT_AVAILABLE and OCR_AVAILABLE:
        try:
            import easyocr
            reader = easyocr.Reader(['pt'], gpu=False, verbose=False)
            return reader
        except Exception as e:
            st.error(f"Erro ao carregar EasyOCR: {e}")
            return None
    return None

def extract_text_from_pdf(pdf_file):
    """Extrai texto de um arquivo PDF usando PyPDF2 e OCR como fallback"""
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(pdf_file.read())
            tmp_file_path = tmp_file.name
        
        text = ""
        
        # Tentativa 1: Extrair texto diretamente com PyPDF2
        st.info("üîç Tentando extrair texto diretamente do PDF...")
        try:
            with open(tmp_file_path, "rb") as file:
                reader = PyPDF2.PdfReader(file)
                for page_num, page in enumerate(reader.pages):
                    page_text = page.extract_text()
                    if page_text.strip():
                        text += page_text + "\n"
                        
            if text.strip():
                st.success("‚úÖ Texto extra√≠do diretamente do PDF!")
        except Exception as e:
            st.warning(f"PyPDF2 falhou: {e}")
        
        # Tentativa 2: OCR apenas se necess√°rio
        if not text.strip() and OCR_AVAILABLE:
            if TESSERACT_AVAILABLE:
                st.info("üì∏ PDF √© imagem. Usando Tesseract OCR...")
                try:
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    status_text.text("Convertendo PDF para imagens...")
                    images = convert_from_path(tmp_file_path, dpi=200)
                    
                    total_pages = len(images)
                    all_text = []
                    
                    for i, img in enumerate(images):
                        progress = (i + 1) / total_pages
                        progress_bar.progress(progress)
                        status_text.text(f"OCR p√°gina {i+1} de {total_pages}...")
                        
                        page_text = pytesseract.image_to_string(img, lang='por')
                        if page_text.strip():
                            all_text.append(page_text)
                    
                    text = '\n'.join(all_text)
                    progress_bar.progress(1.0)
                    status_text.text("‚úÖ Tesseract OCR conclu√≠do!")
                    
                    import time
                    time.sleep(1)
                    progress_bar.empty()
                    status_text.empty()
                    
                except Exception as tesseract_error:
                    st.warning(f"Tesseract falhou: {tesseract_error}")
                    text = ""
            
            if not text.strip() and not TESSERACT_AVAILABLE:
                st.warning("‚ö†Ô∏è Usando EasyOCR - Pode demorar no primeiro uso...")
                
                download_warning = st.warning("üì• EasyOCR est√° baixando modelos. Isso pode demorar alguns minutos na primeira vez...")
                
                reader = load_easyocr()
                if reader:
                    try:
                        download_warning.empty()
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        status_text.text("Convertendo PDF para imagens...")
                        images = convert_from_path(tmp_file_path, dpi=200)
                        
                        total_pages = len(images)
                        all_text = []
                        
                        for i, img in enumerate(images):
                            progress = (i + 1) / total_pages
                            progress_bar.progress(progress)
                            status_text.text(f"EasyOCR p√°gina {i+1} de {total_pages}...")
                            
                            img_array = np.array(img)
                            results = reader.readtext(img_array)
                            
                            page_text = []
                            for (bbox, text_detected, confidence) in results:
                                if confidence > 0.6:
                                    page_text.append(text_detected)
                            
                            if page_text:
                                all_text.append(' '.join(page_text))
                        
                        text = '\n'.join(all_text)
                        progress_bar.progress(1.0)
                        status_text.text("‚úÖ EasyOCR conclu√≠do!")
                        
                        import time
                        time.sleep(1)
                        progress_bar.empty()
                        status_text.empty()
                        
                    except Exception as easyocr_error:
                        st.error(f"EasyOCR falhou: {easyocr_error}")
                        download_warning.empty()
        
        os.unlink(tmp_file_path)
        return text
        
    except Exception as e:
        st.error(f"Erro geral ao processar PDF: {e}")
        return ""

def extract_field(patterns, text):
    """Procura por uma lista de padr√µes regex e retorna o valor encontrado"""
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
        if match:
            if match.groups():
                value = match.group(1).strip()
                value = re.sub(r'\s+', ' ', value)
                return value
            else:
                value = match.group(0).strip()
                value = re.sub(r'\s+', ' ', value)
                return value
    return ""

def extract_vehicle_sections(text):
    """Extrai todas as se√ß√µes de ve√≠culos do texto"""
    # Padr√£o para encontrar se√ß√µes de ve√≠culos
    vehicle_pattern = r'Descri√ß√£o do Item -\s*(\d+)\s*-\s*Produto Auto Frota(.*?)(?=Descri√ß√£o do Item -\s*\d+\s*-\s*Produto Auto Frota|$)'
    
    sections = re.findall(vehicle_pattern, text, re.DOTALL | re.IGNORECASE)
    
    vehicles = []
    for item_num, content in sections:
        vehicles.append({
            'item': item_num.strip(),
            'content': content.strip()
        })
    
    return vehicles

def parse_vehicle_data(vehicle_content, item_num):
    """Extrai dados de um ve√≠culo espec√≠fico"""
    
    # Fun√ß√£o auxiliar para extrair valores monet√°rios
    def extract_money(patterns, text):
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                value = match.group(1).replace('.', '').replace(',', '.')
                try:
                    return float(value)
                except:
                    return value
        return 0
    
    # Fun√ß√£o auxiliar para extrair valores simples
    def extract_simple(patterns, text):
        result = extract_field(patterns, text)
        return result if result else ""
    
    dados = {
        # Identifica√ß√£o B√°sica
        'Item': item_num,
        'CEP de Pernoite': extract_simple([
            r'CEP de Pernoite do Ve√≠culo[:\s]*([^\s]+)',
            r'(\d{5}-?\d{3})'
        ], vehicle_content),
        
        'Fabricante': extract_simple([
            r'Fabricante[:\s]*([^\n\r]+?)(?=\s*Ve√≠culo:|$)',
            r'(CHEVROLET|FORD|VOLKSWAGEN|FIAT|NISSAN|TOYOTA|BYD|MITSUBISHI)'
        ], vehicle_content),
        
        'Ve√≠culo': extract_simple([
            r'Ve√≠culo[:\s]*([^\n\r]+?)(?=\s*(?:Ano Modelo|4¬∫ Eixo)|$)'
        ], vehicle_content),
        
        'Ano Modelo': extract_simple([
            r'Ano Modelo[:\s]*(\d{4})'
        ], vehicle_content),
        
        'Chassi': extract_simple([
            r'Chassi[:\s]*([A-Z0-9]{17})'
        ], vehicle_content),
        
        'Chassi Remarcado': extract_simple([
            r'Chassi Remarcado[:\s]*([^\n\r]+?)(?=\s*Placa:|$)'
        ], vehicle_content),
        
        'Placa': extract_simple([
            r'Placa[:\s]*([A-Z0-9]+)'
        ], vehicle_content),
        
        'Combust√≠vel': extract_simple([
            r'Combust√≠vel[:\s]*([^\n\r]+?)(?=\s*Lota√ß√£o|$)',
            r'(Diesel|Gasolina|Flex|√Ålcool|El√©trico)'
        ], vehicle_content),
        
        'Lota√ß√£o Ve√≠culo': extract_simple([
            r'Lota√ß√£o Ve√≠culo[:\s]*(\d+)'
        ], vehicle_content),
        
        'Ve√≠culo 0km': extract_simple([
            r'Ve√≠culo 0km[:\s]*([^\n\r]+?)(?=\s*Ve√≠culo Blindado|$)'
        ], vehicle_content),
        
        'Ve√≠culo Blindado': extract_simple([
            r'Ve√≠culo Blindado[:\s]*([^\n\r]+?)(?=\s*Ve√≠culo com Kit|$)'
        ], vehicle_content),
        
        'Ve√≠culo com Kit G√°s': extract_simple([
            r'Ve√≠culo com Kit G√°s[:\s]*([^\n\r]+?)(?=\s*Dispositivo|$)'
        ], vehicle_content),
        
        'Dispositivo em Comodato': extract_simple([
            r'Dispositivo em Comodato[:\s]*([^\n\r]+?)(?=\s*Tipo de|$)'
        ], vehicle_content),
        
        'Tipo de Carroceria': extract_simple([
            r'Tipo de Carroceria[:\s]*([^\n\r]+?)(?=\s*Isen√ß√£o|$)'
        ], vehicle_content),
        
        'Isen√ß√£o Fiscal': extract_simple([
            r'Isen√ß√£o Fiscal[:\s]*([^\n\r]+?)(?=\s*Propriet√°rio|$)'
        ], vehicle_content),
        
        'Propriet√°rio': extract_simple([
            r'Propriet√°rio[:\s]*([^\n\r]+?)(?=\s*Fipe|$)'
        ], vehicle_content),
        
        'Fipe': extract_simple([
            r'Fipe[:\s]*([^\n\r]+?)(?=\s*Tipo de Seguro|$)'
        ], vehicle_content),
        
        'Tipo de Seguro': extract_simple([
            r'Tipo de Seguro[:\s]*([^\n\r]+?)(?=\s*Nr Ap√≥lice|$)'
        ], vehicle_content),
        
        'Nome da Seguradora Anterior': extract_simple([
            r'Nome da Congenere[:\s]*([^\n\r]+?)(?=\s*Venc Ap√≥lice|$)'
        ], vehicle_content),
        
        'Nr Ap√≥lice Cong√™nere': extract_simple([
            r'Nr Ap√≥lice Congenere[:\s]*([^\n\r]+?)(?=\s*Venc|$)'
        ], vehicle_content),
        
        'Venc Ap√≥lice Cong.': extract_simple([
            r'Venc Ap√≥lice Cong\.[:\s]*([^\n\r]+?)(?=\s*Classe|$)'
        ], vehicle_content),
        
        'Classe de B√¥nus': extract_simple([
            r'Classe de B√¥nus[:\s]*(\d+)'
        ], vehicle_content),
        
        'C√≥digo de Identifica√ß√£o (CI)': extract_simple([
            r'C√≥digo de Identifica√ß√£o \(CI\)[:\s]*([^\n\r]+?)(?=\s*Km de|$)'
        ], vehicle_content),
        
        'Km de Reboque': extract_simple([
            r'Km de Reboque[:\s]*([^\n\r]+?)(?=\s*CNPJ|$)'
        ], vehicle_content),
        
        'CNPJ Fornecedor': extract_simple([
            r'CNPJ[:\s]*([^\n\r]+?)(?=\s*Fornecedor|$)'
        ], vehicle_content),
        
        'Fornecedor de Vidros': extract_simple([
            r'Fornecedor de Vidros[:\s]*([^\n\r]+?)(?=\s*Coberturas|$)'
        ], vehicle_content),
    }
    
    # Extra√ß√£o de valores das coberturas
    # Colis√£o, Inc√™ndio e Roubo/Furto
    dados['Limite Colis√£o/Inc√™ndio/Roubo'] = extract_simple([
        r'Colis√£o, Inc√™ndio e Roubo/Furto\s+Valor Referenciado \(VMR\)\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio Colis√£o/Inc√™ndio/Roubo'] = extract_money([
        r'Colis√£o, Inc√™ndio e Roubo/Furto.*?Valor Referenciado.*?\s+([\d.,]+)\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Franquia Colis√£o/Inc√™ndio/Roubo'] = extract_money([
        r'Colis√£o, Inc√™ndio e Roubo/Furto.*?Valor Referenciado.*?\s+[\d.,]+\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # RCF-V Danos Materiais
    dados['Limite RCF-V Danos Materiais'] = extract_money([
        r'RCF-V - Danos Materiais\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio RCF-V Danos Materiais'] = extract_money([
        r'RCF-V - Danos Materiais\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # RCF-V Danos Corporais
    dados['Limite RCF-V Danos Corporais'] = extract_money([
        r'RCF-V - Danos Corporais\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio RCF-V Danos Corporais'] = extract_money([
        r'RCF-V - Danos Corporais\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # RCF-V Danos Morais
    dados['Limite RCF-V Danos Morais'] = extract_money([
        r'RCF-V - Danos morais\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio RCF-V Danos Morais'] = extract_money([
        r'RCF-V - Danos morais\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # APP Morte por Passageiro
    dados['Limite APP Morte por Passageiro'] = extract_money([
        r'APP - Morte por Passageiro\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio APP Morte por Passageiro'] = extract_money([
        r'APP - Morte por Passageiro\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # APP Invalidez por Passageiro
    dados['Limite APP Invalidez por Passageiro'] = extract_money([
        r'APP - Invalidez por Passageiro\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio APP Invalidez por Passageiro'] = extract_money([
        r'APP - Invalidez por Passageiro\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # Assist√™ncia 24 horas
    dados['Assist√™ncia 24 horas'] = extract_simple([
        r'Assist√™ncia 24 horas\s+([^\n\r]+?)(?=\s*Km adicional|$)'
    ], vehicle_content)
    
    dados['Pr√™mio Assist√™ncia 24h'] = extract_money([
        r'Assist√™ncia 24 horas\s+VIP\s+([\d.,]+)'
    ], vehicle_content)
    
    # Km adicional de reboque
    dados['Km adicional de reboque'] = extract_simple([
        r'Km adicional de reboque\s+([^\n\r]+?)(?=\s*[\d.,]+|$)'
    ], vehicle_content)
    
    dados['Pr√™mio Km adicional'] = extract_money([
        r'Km adicional de reboque\s+[\w\s]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # Kit G√°s
    dados['Valor Kit G√°s'] = extract_money([
        r'Kit [gG]√°s\s+([\d.,]+)\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio Kit G√°s'] = extract_money([
        r'Kit [gG]√°s\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # Blindagem
    dados['Valor Blindagem'] = extract_money([
        r'Blindagem\s+([\d.,]+)\s+([\d.,]+)'
    ], vehicle_content)
    
    dados['Pr√™mio Blindagem'] = extract_money([
        r'Blindagem\s+[\d.,]+\s+([\d.,]+)'
    ], vehicle_content)
    
    # Pr√™mio L√≠quido Total
    dados['Pr√™mio L√≠quido Total'] = extract_money([
        r'Pr√™mio L√≠quido Total[:\s]+([\d.,]+)'
    ], vehicle_content)
    
    # Franquias de Vidros
    franquias_patterns = {
        'Franquia Parabrisa': r'Parabrisa[:\s]*R\$\s*([\d.,]+)',
        'Franquia Parabrisa Delaminado': r'Parabrisa Delaminado[:\s]*R\$\s*([\d.,]+)',
        'Franquia Vigia/Traseiro': r'Vigia/Traseiro[:\s]*R\$\s*([\d.,]+)',
        'Franquia Vigia/Traseiro Delaminado': r'Vigia/Traseiro Delaminado[:\s]*R\$\s*([\d.,]+)',
        'Franquia Lateral': r'Lateral[:\s]*R\$\s*([\d.,]+)',
        'Franquia Lateral Delaminado': r'Lateral Delaminado[:\s]*R\$\s*([\d.,]+)',
        'Franquia Farol Hal√≥geno': r'Farol Hal√≥geno[:\s]*R\$\s*([\d.,]+)',
        'Franquia Farol Xenon/LED': r'Farol xenon/led[:\s]*R\$\s*([\d.,]+)',
        'Franquia Farol Inteligente': r'Farol Inteligente[:\s]*R\$\s*([\d.,]+)',
        'Franquia Farol Auxiliar': r'Farol auxiliar[:\s]*R\$\s*([\d.,]+)',
        'Franquia Lanterna Hal√≥gena': r'Lanterna Hal√≥gena[:\s]*R\$\s*([\d.,]+)',
        'Franquia Lanterna LED': r'Lanterna led[:\s]*R\$\s*([\d.,]+)',
        'Franquia Lanterna Auxiliar': r'Lanterna auxiliar[:\s]*R\$\s*([\d.,]+)',
        'Franquia Retrovisor Externo': r'Retrovisor externo[:\s]*R\$\s*([\d.,]+)',
        'Franquia Retrovisor Interno': r'Retrovisor Interno[:\s]*R\$\s*([\d.,]+)',
        'Franquia Teto Solar': r'Teto Solar[:\s]*R\$\s*([\d.,]+)',
        'Franquia M√°quina de Vidro': r'M√°quina de Vidro[:\s]*R\$\s*([\d.,]+)'
    }
    
    for field, pattern in franquias_patterns.items():
        dados[field] = extract_money([pattern], vehicle_content)
    
    return dados

def parse_header_data(text):
    """Extrai dados gerais da ap√≥lice"""
    dados_header = {
        'Raz√£o Social': extract_field([
            r'Raz√£o Social[:\s]*([^\n\r]+?)(?=\s*CNPJ|$)',
            r'(ROD TRANSPORTES LTDA)'
        ], text),
        
        'CNPJ': extract_field([
            r'CNPJ[:\s]*([^\n\r]+?)(?=\s*Atividade|$)',
            r'(\d{3}\.\d{3}\.\d{3}/\d{4}-\d{2})'
        ], text),
        
        'Atividade Principal': extract_field([
            r'Atividade Principal[:\s]*([^\n\r]+?)(?=\s*Endere√ßo|$)'
        ], text),
        
        'Endere√ßo': extract_field([
            r'Endere√ßo[:\s]*([^\n\r]+?)(?=\s*Bairro|$)'
        ], text),
        
        'Bairro': extract_field([
            r'Bairro[:\s]*([^\n\r]+?)(?=\s*CEP|$)'
        ], text),
        
        'CEP': extract_field([
            r'CEP[:\s]*([^\n\r]+?)(?=\s*Cidade|$)'
        ], text),
        
        'Cidade': extract_field([
            r'Cidade[:\s]*([^\n\r]+?)(?=\s*UF|$)'
        ], text),
        
        'UF': extract_field([
            r'UF[:\s]*([^\n\r]+?)(?=\s*Telefone|$)'
        ], text),
        
        'Telefone': extract_field([
            r'Telefone[:\s]*([^\n\r]+?)(?=\s*Celular|$)'
        ], text),
        
        'Celular': extract_field([
            r'Celular[:\s]*([^\n\r]+?)(?=\s*Dados|$)'
        ], text),
        
        'Ramo': extract_field([
            r'Ramo[:\s]*([^\n\r]+?)(?=\s*Ap√≥lice|$)'
        ], text),
        
        'Ap√≥lice': extract_field([
            r'Ap√≥lice[:\s]*([^\n\r]+?)(?=\s*Neg√≥cio|$)'
        ], text),
        
        'Neg√≥cio': extract_field([
            r'Neg√≥cio[:\s]*([^\n\r]+?)(?=\s*Proposta|$)'
        ], text),
        
        'Proposta': extract_field([
            r'Proposta[:\s]*([^\n\r]+?)(?=\s*Quantidade|$)'
        ], text),
        
        'Quantidade de Itens': extract_field([
            r'Quantidade de Itens[:\s]*([^\n\r]+?)(?=\s*Sucursal|$)'
        ], text),
        
        'Sucursal': extract_field([
            r'Sucursal[:\s]*([^\n\r]+?)(?=\s*Moeda|$)'
        ], text),
        
        'Moeda': extract_field([
            r'Moeda[:\s]*([^\n\r]+?)(?=\s*Forma|$)'
        ], text),
        
        'Vig√™ncia do Seguro': extract_field([
            r'Vig√™ncia do Seguro[:\s]*([^\n\r]+?)(?=\s*Data|$)'
        ], text),
        
        'Data da Vers√£o': extract_field([
            r'Data da Vers√£o[:\s]*([^\n\r]+?)(?=\s*Data da Emiss√£o|$)'
        ], text),
        
        'Data da Emiss√£o': extract_field([
            r'Data da Emiss√£o[:\s]*([^\n\r]+?)(?=\s*Segurado|$)'
        ], text),
        
        'Nome Corretor': extract_field([
            r'Nome Corretor[:\s]*([^\n\r]+?)(?=\s*Part|$)'
        ], text),
        
        'Registro SUSEP': extract_field([
            r'Registro SUSEP[:\s]*([^\n\r]+?)(?=\s*L√≠der|$)'
        ], text),
        
        'Pr√™mio L√≠quido Total Geral': extract_field([
            r'Pr√™mio L√≠quido Total[:\s]*R\$\s*([^\n\r]+?)(?=\s*Juros|$)'
        ], text),
        
        'Juros': extract_field([
            r'Juros[:\s]*R\$\s*([^\n\r]+?)(?=\s*I\.O\.F|$)'
        ], text),
        
        'I.O.F': extract_field([
            r'I\.O\.F[:\s]*R\$\s*([^\n\r]+?)(?=\s*Pr√™mio Total|$)'
        ], text),
        
        'Pr√™mio Total Geral': extract_field([
            r'Pr√™mio Total[:\s]*R\$\s*([^\n\r]+?)(?=\s*Cobran√ßa|$)'
        ], text),
        
        'Cobran√ßa': extract_field([
            r'Cobran√ßa[:\s]*([^\n\r]+?)(?=\s*Parcelamento|$)'
        ], text),
    }
    
    return dados_header

def create_excel_file(dados_header, all_vehicles_data):
    """Cria arquivo Excel com os dados extra√≠dos"""
    buffer = BytesIO()
    
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        # Aba com dados gerais da ap√≥lice
        df_header = pd.DataFrame([dados_header])
        df_header.to_excel(writer, sheet_name='Dados Gerais', index=False)
        
        # Aba com todos os ve√≠culos
        if all_vehicles_data:
            df_vehicles = pd.DataFrame(all_vehicles_data)
            df_vehicles.to_excel(writer, sheet_name='Todos os Ve√≠culos', index=False)
            
            # Aba separada para dados financeiros (coberturas e pr√™mios)
            financial_columns = [
                'Item', 'Fabricante', 'Ve√≠culo', 'Placa',
                'Limite Colis√£o/Inc√™ndio/Roubo', 'Pr√™mio Colis√£o/Inc√™ndio/Roubo', 'Franquia Colis√£o/Inc√™ndio/Roubo',
                'Limite RCF-V Danos Materiais', 'Pr√™mio RCF-V Danos Materiais',
                'Limite RCF-V Danos Corporais', 'Pr√™mio RCF-V Danos Corporais',
                'Limite RCF-V Danos Morais', 'Pr√™mio RCF-V Danos Morais',
                'Limite APP Morte por Passageiro', 'Pr√™mio APP Morte por Passageiro',
                'Limite APP Invalidez por Passageiro', 'Pr√™mio APP Invalidez por Passageiro',
                'Pr√™mio Assist√™ncia 24h', 'Pr√™mio Km adicional',
                'Valor Kit G√°s', 'Pr√™mio Kit G√°s',
                'Valor Blindagem', 'Pr√™mio Blindagem',
                'Pr√™mio L√≠quido Total'
            ]
            
            financial_data = []
            for vehicle in all_vehicles_data:
                financial_row = {col: vehicle.get(col, '') for col in financial_columns}
                financial_data.append(financial_row)
            
            df_financial = pd.DataFrame(financial_data)
            df_financial.to_excel(writer, sheet_name='Dados Financeiros', index=False)
            
            # Aba para franquias de vidros
            franquia_columns = [
                'Item', 'Fabricante', 'Ve√≠culo', 'Placa',
                'Franquia Parabrisa', 'Franquia Parabrisa Delaminado',
                'Franquia Vigia/Traseiro', 'Franquia Vigia/Traseiro Delaminado',
                'Franquia Lateral', 'Franquia Lateral Delaminado',
                'Franquia Farol Hal√≥geno', 'Franquia Farol Xenon/LED', 'Franquia Farol Inteligente', 'Franquia Farol Auxiliar',
                'Franquia Lanterna Hal√≥gena', 'Franquia Lanterna LED', 'Franquia Lanterna Auxiliar',
                'Franquia Retrovisor Externo', 'Franquia Retrovisor Interno',
                'Franquia Teto Solar', 'Franquia M√°quina de Vidro'
            ]
            
            franquia_data = []
            for vehicle in all_vehicles_data:
                franquia_row = {col: vehicle.get(col, '') for col in franquia_columns}
                franquia_data.append(franquia_row)
            
            df_franquias = pd.DataFrame(franquia_data)
            df_franquias.to_excel(writer, sheet_name='Franquias Vidros', index=False)
    
    buffer.seek(0)
    return buffer

def main():
    st.title("üöó Conversor Completo de Ap√≥lices Tokio Marine")
    st.markdown("---")
    
    # Status detalhado do sistema
    st.markdown("### üîß Status do Sistema")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.success("‚úÖ PyPDF2 (Texto)")
    with col2:
        if TESSERACT_AVAILABLE:
            st.success("‚úÖ Tesseract (OCR)")
        elif OCR_AVAILABLE:
            st.warning("‚ö†Ô∏è EasyOCR (Lento)")
        else:
            st.error("‚ùå OCR indispon√≠vel")
    with col3:
        st.success("‚úÖ Excel Export")
    
    st.markdown("""
    ### üìã O que ser√° extra√≠do:
    
    **Dados Gerais da Ap√≥lice:**
    - Informa√ß√µes do segurado (nome, CNPJ, endere√ßo)
    - Dados da ap√≥lice (n√∫mero, vig√™ncia, pr√™mios)
    - Informa√ß√µes do corretor
    
    **Para cada ve√≠culo (at√© 23 itens):**
    - ‚úÖ **Identifica√ß√£o:** CEP, fabricante, modelo, ano, chassi, placa, combust√≠vel
    - ‚úÖ **Caracter√≠sticas:** lota√ß√£o, blindagem, kit g√°s, tipo de carroceria
    - ‚úÖ **Coberturas:** limites e pr√™mios de todas as coberturas
    - ‚úÖ **Franquias:** todos os tipos de vidros e componentes (66 campos por ve√≠culo)
    - ‚úÖ **Classifica√ß√£o:** classe de b√¥nus, c√≥digo de identifica√ß√£o, FIPE
    
    **Total de colunas por ve√≠culo: ~66 campos**
    """)
    
    # Upload do arquivo
    uploaded_file = st.file_uploader(
        "Escolha um arquivo PDF da ap√≥lice Tokio Marine",
        type=['pdf'],
        help="PDFs com texto s√£o processados instantaneamente. PDFs escaneados requerem OCR."
    )
    
    if uploaded_file is not None:
        # Mostra informa√ß√µes do arquivo
        st.success(f"‚úÖ Arquivo carregado: {uploaded_file.name}")
        st.info(f"üìä Tamanho: {len(uploaded_file.getvalue())/1024:.1f} KB")
        
        # Bot√£o para processar
        if st.button("üîÑ Processar PDF Completo", type="primary"):
            # Extrai texto do PDF
            text = extract_text_from_pdf(uploaded_file)
            
            if text.strip():
                # Parse dos dados gerais
                with st.spinner("üß† Analisando dados gerais da ap√≥lice..."):
                    dados_header = parse_header_data(text)
                
                # Parse dos ve√≠culos
                with st.spinner("üöó Extraindo dados de todos os ve√≠culos..."):
                    vehicles = extract_vehicle_sections(text)
                    
                    all_vehicles_data = []
                    
                    # Barra de progresso para ve√≠culos
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, vehicle in enumerate(vehicles):
                        progress = (i + 1) / len(vehicles)
                        progress_bar.progress(progress)
                        status_text.text(f"Processando ve√≠culo {vehicle['item']} de {len(vehicles)}...")
                        
                        vehicle_data = parse_vehicle_data(vehicle['content'], vehicle['item'])
                        all_vehicles_data.append(vehicle_data)
                    
                    progress_bar.progress(1.0)
                    status_text.text(f"‚úÖ {len(vehicles)} ve√≠culos processados!")
                    
                    import time
                    time.sleep(1)
                    progress_bar.empty()
                    status_text.empty()
                
                # Mostra os dados extra√≠dos
                st.markdown("## üìã Dados Extra√≠dos")
                
                # Estat√≠sticas
                total_campos_header = len([v for v in dados_header.values() if v and v != ""])
                total_veiculos = len(all_vehicles_data)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìÑ Campos Gerais", f"{total_campos_header}/20")
                with col2:
                    st.metric("üöó Ve√≠culos Encontrados", total_veiculos)
                with col3:
                    if all_vehicles_data:
                        campos_por_veiculo = len([v for v in all_vehicles_data[0].values() if v and v != ""])
                        st.metric("üìä Campos por Ve√≠culo", f"{campos_por_veiculo}/66")
                
                # Dados gerais
                st.markdown("### üè¢ Informa√ß√µes Gerais da Ap√≥lice")
                dados_importantes = {
                    'Raz√£o Social': dados_header.get('Raz√£o Social', ''),
                    'CNPJ': dados_header.get('CNPJ', ''),
                    'Ap√≥lice': dados_header.get('Ap√≥lice', ''),
                    'Vig√™ncia do Seguro': dados_header.get('Vig√™ncia do Seguro', ''),
                    'Pr√™mio Total Geral': dados_header.get('Pr√™mio Total Geral', ''),
                    'Quantidade de Itens': dados_header.get('Quantidade de Itens', '')
                }
                
                for key, value in dados_importantes.items():
                    if value and value != "":
                        st.success(f"**{key}:** {value}")
                    else:
                        st.warning(f"**{key}:** N√£o encontrado")
                
                # Resumo dos ve√≠culos
                if all_vehicles_data:
                    st.markdown("### üöô Resumo dos Ve√≠culos")
                    
                    # Tabela resumo
                    resumo_veiculos = []
                    for vehicle in all_vehicles_data:
                        resumo = {
                            'Item': vehicle.get('Item', ''),
                            'Fabricante': vehicle.get('Fabricante', ''),
                            'Ve√≠culo': vehicle.get('Ve√≠culo', ''),
                            'Ano': vehicle.get('Ano Modelo', ''),
                            'Placa': vehicle.get('Placa', ''),
                            'Combust√≠vel': vehicle.get('Combust√≠vel', ''),
                            'Pr√™mio Total': vehicle.get('Pr√™mio L√≠quido Total', '')
                        }
                        resumo_veiculos.append(resumo)
                    
                    df_resumo = pd.DataFrame(resumo_veiculos)
                    st.dataframe(df_resumo, use_container_width=True)
                
                # Tabelas expandidas
                with st.expander("üìä Ver todos os dados detalhados"):
                    st.markdown("#### Dados Gerais Completos")
                    df_header_display = pd.DataFrame([dados_header])
                    st.dataframe(df_header_display, use_container_width=True)
                    
                    if all_vehicles_data:
                        st.markdown("#### Todos os Dados dos Ve√≠culos")
                        df_vehicles_display = pd.DataFrame(all_vehicles_data)
                        st.dataframe(df_vehicles_display, use_container_width=True)
                        
                        # Estat√≠sticas por fabricante
                        if 'Fabricante' in df_vehicles_display.columns:
                            st.markdown("#### üìä Estat√≠sticas por Fabricante")
                            fabricantes = df_vehicles_display['Fabricante'].value_counts()
                            st.bar_chart(fabricantes)
                
                # Gera o arquivo Excel
                with st.spinner("üìä Gerando arquivo Excel..."):
                    excel_buffer = create_excel_file(dados_header, all_vehicles_data)
                
                # Bot√£o de download
                st.markdown("## üíæ Download")
                apolice_numero = dados_header.get('Ap√≥lice', 'sem_numero')
                if not apolice_numero or apolice_numero == "":
                    apolice_numero = "sem_numero"
                nome_arquivo = f"apolice_completa_{apolice_numero}.xlsx"
                
                col1, col2 = st.columns(2)
                with col1:
                    st.download_button(
                        label="üì• Baixar Planilha Excel Completa",
                        data=excel_buffer,
                        file_name=nome_arquivo,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        type="primary"
                    )
                
                with col2:
                    st.info(f"""
                    **üìã Arquivo Excel cont√©m:**
                    - Aba "Dados Gerais" (informa√ß√µes da ap√≥lice)
                    - Aba "Todos os Ve√≠culos" (dados completos)
                    - Aba "Dados Financeiros" (coberturas e pr√™mios)
                    - Aba "Franquias Vidros" (todas as franquias)
                    """)
                
                # Sucesso final
                if total_veiculos > 0:
                    taxa_sucesso = (total_campos_header/20 + campos_por_veiculo/66) / 2 * 100
                    if taxa_sucesso >= 80:
                        st.balloons()
                        st.success(f"üéâ Processamento conclu√≠do com excel√™ncia! {total_veiculos} ve√≠culos processados.")
                    else:
                        st.success(f"‚úÖ Processamento conclu√≠do! {total_veiculos} ve√≠culos processados.")
                else:
                    st.warning("‚ö†Ô∏è Nenhum ve√≠culo foi encontrado no PDF. Verifique se √© uma ap√≥lice Tokio Marine Auto Frota.")
                
            else:
                st.error("‚ùå N√£o foi poss√≠vel extrair texto do PDF.")
        
        # Debug - Mostra preview do texto extra√≠do
        with st.expander("üîç Ver texto extra√≠do do PDF (debug)"):
            if st.button("Extrair texto para visualiza√ß√£o"):
                with st.spinner("Extraindo texto..."):
                    text_preview = extract_text_from_pdf(uploaded_file)
                if text_preview:
                    # Mostra se√ß√µes de ve√≠culos encontradas
                    vehicles_debug = extract_vehicle_sections(text_preview)
                    st.info(f"üöó Se√ß√µes de ve√≠culos encontradas: {len(vehicles_debug)}")
                    
                    for i, vehicle in enumerate(vehicles_debug[:3]):  # Mostra apenas os primeiros 3
                        st.write(f"**Ve√≠culo {vehicle['item']}:**")
                        st.text_area(
                            f"Conte√∫do do ve√≠culo {vehicle['item']}:", 
                            vehicle['content'][:500] + "..." if len(vehicle['content']) > 500 else vehicle['content'], 
                            height=200,
                            key=f"vehicle_{i}"
                        )
                    
                    if len(vehicles_debug) > 3:
                        st.info(f"... e mais {len(vehicles_debug) - 3} ve√≠culos")
                    
                    st.text_area(
                        "Texto completo extra√≠do:", 
                        text_preview[:3000] + "..." if len(text_preview) > 3000 else text_preview, 
                        height=400
                    )
                    st.info(f"üìè Total de caracteres: {len(text_preview)}")
                else:
                    st.error("N√£o foi poss√≠vel extrair texto do PDF")

    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.markdown("## üõ†Ô∏è Configura√ß√£o para Streamlit Cloud")
        
        st.markdown("**Para OCR funcionar, crie:**")
        
        st.markdown("üìÑ **packages.txt:**")
        st.code("""tesseract-ocr
tesseract-ocr-por
poppler-utils""", language="text")
        
        st.markdown("üìÑ **requirements.txt:**")
        st.code("""streamlit
PyPDF2
pandas
openpyxl
pytesseract
pdf2image
Pillow
numpy""", language="text")
        
        st.markdown("## üìä Campos Extra√≠dos")
        st.markdown("""
        **Por ve√≠culo (~66 campos):**
        - üÜî Identifica√ß√£o (27 campos)
        - üí∞ Coberturas (25 campos)  
        - üîß Franquias (17 campos)
        
        **Total:** Dados gerais + 23 ve√≠culos
        """)
        
        st.markdown("## üí° Dicas")
        st.markdown("""
        - ‚ö° PDFs com texto: Instant√¢neo
        - üì∏ PDFs escaneados: Requer OCR
        - üïê Primeira vez com EasyOCR: Lento
        - üöÄ Use Tesseract quando poss√≠vel
        - üìä Resultado: 4 abas no Excel
        """)

if __name__ == "__main__":
    main()