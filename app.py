import streamlit as st
import PyPDF2
import pandas as pd
import re
import os
from io import BytesIO
import tempfile

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Conversor de Ap√≥lices Tokio Marine",
    page_icon="üìÑ",
    layout="wide"
)

def extract_text_from_pdf(pdf_file):
    """
    Extrai texto de um arquivo PDF usando PyPDF2
    """
    try:
        # Cria um arquivo tempor√°rio
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(pdf_file.read())
            tmp_file_path = tmp_file.name
        
        text = ""
        with open(tmp_file_path, "rb") as file:
            reader = PyPDF2.PdfReader(file)
            for page in reader.pages:
                text += page.extract_text() + "\n"
        
        # Remove o arquivo tempor√°rio
        os.unlink(tmp_file_path)
        
        return text
    except Exception as e:
        st.error(f"Erro ao extrair texto do PDF: {e}")
        return ""

def extract_field(patterns, text):
    """
    Procura por uma lista de padr√µes regex e retorna o valor encontrado
    """
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()
    return "N√£o encontrado"

def parse_tokio_data(text):
    """
    Extrai dados espec√≠ficos da ap√≥lice Tokio Marine
    """
    # Dados do cabe√ßalho/cliente
    dados_header = {
        "NOME DO CLIENTE": extract_field([r"Propriet√°rio[:\s]*(.*)"], text),
        "CNPJ": extract_field([r"CNPJ[:\s]*(.*)"], text),
        "AP√ìLICE": extract_field([r"Nr Ap√≥lice.*?(\d+)"], text),
        "VIG√äNCIA": extract_field([r"Venc Ap√≥lice.*?:\s*([\d/]+)"], text),
    }

    # Dados do ve√≠culo
    dados_veiculo = {
        "DESCRI√á√ÉO DO ITEM": extract_field([r"Descri√ß√£o do Item - (.*)"], text),
        "CEP DE PERNOITE DO VE√çCULO": extract_field([r"CEP de Pernoite do Ve√≠culo:\s*(.*)"], text),
        "TIPO DE UTILIZA√á√ÉO": extract_field([r"Tipo de utiliza√ß√£o:\s*(.*)"], text),
        "VE√çCULO": extract_field([r"Ve√≠culo:\s*(.*)"], text),
        "ANO MODELO": extract_field([r"Ano Modelo:\s*(\d{4})"], text),
        "CHASSI": extract_field([r"Chassi:\s*(.*)"], text),
        "PLACA": extract_field([r"Placa:\s*(.*)"], text),
        "COMBUST√çVEL": extract_field([r"Combust√≠vel:\s*(.*)"], text),
        "LOTA√á√ÉO VE√çCULO": extract_field([r"Lota√ß√£o Ve√≠culo:\s*(.*)"], text),
        "VE√çCULO 0KM": extract_field([r"Ve√≠culo 0km:\s*(.*)"], text),
        "VE√çCULO BLINDADO": extract_field([r"Ve√≠culo Blindado:\s*(.*)"], text),
        "VE√çCULO COM KIT G√ÅS": extract_field([r"Ve√≠culo com Kit G√°s:\s*(.*)"], text),
        "TIPO DE CARROCERIA": extract_field([r"Tipo de Carroceria:\s*(.*)"], text),
        "ISEN√á√ÉO FISCAL": extract_field([r"Isen√ß√£o Fiscal:\s*(.*)"], text),
        "PROPRIET√ÅRIO": extract_field([r"Propriet√°rio:\s*(.*)"], text),
        "FIPE": extract_field([r"Fipe:\s*(.*)"], text),
        "TIPO DE SEGURO": "Renova√ß√£o Tokio sem sinistro",
        "NR AP√ìLICE CONGENERE": extract_field([r"Nr Ap√≥lice Congenere:\s*(.*)"], text),
        "NOME DA CONGENERE": extract_field([r"Nome da Congenere:\s*(.*)"], text),
        "VENC AP√ìLICE CONGENERE": extract_field([r"Venc Ap√≥lice Cong.: (.*)"], text),
        "CLASSE DE B√îNUS": extract_field([r"Classe de B√¥nus:\s*(.*)"], text),
        "C√ìDIGO DE IDENTIFICA√á√ÉO (CI)": extract_field([r"C√≥digo de Identifica√ß√£o \(CI\):\s*(.*)"], text),
        "KM DE REBOQUE": extract_field([r"Km de Reboque:\s*(.*)"], text),
        "KM (ADICIONAL)": extract_field([r"km\(Adicional\):\s*(.*)"], text),
    }

    return dados_header, dados_veiculo

def create_excel_file(dados_header, dados_veiculo):
    """
    Cria arquivo Excel com os dados extra√≠dos
    """
    # Cria um buffer em mem√≥ria
    buffer = BytesIO()
    
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        # Aba com dados gerais
        df_header = pd.DataFrame([dados_header])
        df_header.to_excel(writer, sheet_name='Dados Gerais', index=False)
        
        # Aba com dados do ve√≠culo
        df_veiculo = pd.DataFrame([dados_veiculo])
        df_veiculo.to_excel(writer, sheet_name='Ve√≠culos', index=False)
    
    buffer.seek(0)
    return buffer

def main():
    st.title("üöó Conversor de Ap√≥lices Tokio Marine")
    st.markdown("---")
    
    st.markdown("""
    ### Como usar:
    1. Fa√ßa o upload da sua ap√≥lice em PDF
    2. Aguarde o processamento autom√°tico
    3. Visualize os dados extra√≠dos
    4. Baixe a planilha Excel gerada
    """)
    
    # Upload do arquivo
    uploaded_file = st.file_uploader(
        "Escolha um arquivo PDF da ap√≥lice Tokio Marine",
        type=['pdf'],
        help="Fa√ßa upload do arquivo PDF da ap√≥lice para convers√£o"
    )
    
    if uploaded_file is not None:
        # Mostra informa√ß√µes do arquivo
        st.success(f"‚úÖ Arquivo carregado: {uploaded_file.name}")
        st.info(f"üìä Tamanho: {len(uploaded_file.getvalue())/1024:.1f} KB")
        
        # Bot√£o para processar
        if st.button("üîÑ Processar PDF", type="primary"):
            with st.spinner("Extraindo dados da ap√≥lice..."):
                # Extrai texto do PDF
                text = extract_text_from_pdf(uploaded_file)
                
                if text.strip():
                    # Parse dos dados
                    dados_header, dados_veiculo = parse_tokio_data(text)
                    
                    # Mostra os dados extra√≠dos
                    st.markdown("## üìã Dados Extra√≠dos")
                    
                    # Dados gerais em duas colunas
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("### üè¢ Informa√ß√µes do Cliente")
                        for key, value in dados_header.items():
                            st.text(f"{key}: {value}")
                    
                    with col2:
                        st.markdown("### üöô Informa√ß√µes do Ve√≠culo")
                        # Mostra apenas os primeiros campos para n√£o sobrecarregar
                        campos_importantes = [
                            "VE√çCULO", "ANO MODELO", "PLACA", "CHASSI", 
                            "COMBUST√çVEL", "FIPE", "CLASSE DE B√îNUS"
                        ]
                        for campo in campos_importantes:
                            if campo in dados_veiculo:
                                st.text(f"{campo}: {dados_veiculo[campo]}")
                    
                    # Tabelas expandidas
                    with st.expander("üìä Ver todos os dados em tabela"):
                        st.markdown("#### Dados Gerais")
                        st.dataframe(pd.DataFrame([dados_header]), use_container_width=True)
                        
                        st.markdown("#### Dados do Ve√≠culo")
                        st.dataframe(pd.DataFrame([dados_veiculo]), use_container_width=True)
                    
                    # Gera o arquivo Excel
                    excel_buffer = create_excel_file(dados_header, dados_veiculo)
                    
                    # Bot√£o de download
                    st.markdown("## üíæ Download")
                    nome_arquivo = f"apolice_{dados_header.get('AP√ìLICE', 'sem_numero')}.xlsx"
                    
                    st.download_button(
                        label="üì• Baixar Planilha Excel",
                        data=excel_buffer,
                        file_name=nome_arquivo,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        type="primary"
                    )
                    
                    st.success("‚úÖ Processamento conclu√≠do com sucesso!")
                    
                else:
                    st.error("‚ùå N√£o foi poss√≠vel extrair texto do PDF. Verifique se o arquivo n√£o est√° corrompido.")
        
        # Mostra preview do texto extra√≠do (opcional)
        with st.expander("üîç Ver texto extra√≠do do PDF (debug)"):
            if st.button("Extrair texto para visualiza√ß√£o"):
                text_preview = extract_text_from_pdf(uploaded_file)
                if text_preview:
                    st.text_area("Texto extra√≠do:", text_preview[:2000] + "..." if len(text_preview) > 2000 else text_preview, height=300)
                else:
                    st.error("N√£o foi poss√≠vel extrair texto do PDF")

if __name__ == "__main__":
    main()